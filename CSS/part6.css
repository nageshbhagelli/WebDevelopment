/*
-CSS Grid: Setting a container's display to grid will make all children grid items
    container {
    display : grid;
    }

-Grid Template: They define the lines & track sizing
    grid-template-rows:100px 100px 100px; (n rows)
    grid-template-columns:100px 100px 100px; (n columns)

-Grid Template: Repeat is used to divide all available space
    grid-template-rows : repeat(count, 1fr)   (1fr = 1 fraction of 100% width or available space
    grid-template-columns : repeat(count, 1fr)
    grid-template-rows : repeat(2, 1fr)
    grid-template-rows : 1fr 1fr

-Grid Gaps: They define the gaps between the lines ,row-gap & column-gap
    row-gap:10px;
    column-gap: 10px;
    grid-gap : rowGap columnGap;

-Grid Columns: Defines an item's starting & ending position inside the column
    grid-column-start : line—number
    grid-column-end : line_number
    grid-column : start—col / end—col
    grid-column : start_col/span number

-Grid Properties: Used to align items along the grid
    For horizontal use justify and for vertical use align
    For container use items and for item use self
        justify-items
        justify-self
        align-items
        align-self
    For conbining both horizontal and vertical place is used.
        place-items
        place-self


*/




.container {
    height: 300px;
    width: 600px;
    background-color: black;
    display: grid;
    grid-template-rows: repeat(4, 1fr);
    grid-template-columns: repeat(3, 1fr);
    gap: 15px;
    justify-items: center;
    align-items: center;
}

.item {
    height: 50px;
    width: 100px;
    background-color: greenyellow;
    border: 2px solid black;
    text-align: center;
}

.one {
    /* grid-column-start: 1;
    grid-column-end: 3;
    grid-row: 1/4; */
}